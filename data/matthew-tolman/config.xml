<?xml version="1.0" encoding="utf-8"?>
<blog title="Matthew Tolman" description="Personal Blog and Portfolio" copyright-holder="Matthew Tolman" base-url="https://matthewtolman.com" icon="icon.svg" img-folder="matthew-tolman/imgs">
    <categories>
        <category>Programming</category>
        <category>Web Development</category>
    </categories>
    <articles articleTemplate="article-templ.mustache" listTemplate="list-templ.mustache">
        <!-- In Progress -->
        <!-- <article published="No" title="Shortcomings of Go Concurrency" author="auth:mtolman" time="2024-11-30T20:00:00" id="article:2024-11-shortcomings-of-go-concurrency" file="2024-11-shortcomings-of-go-concurrency.md"> -->
        <!--     <description> -->
        <!--     </description> -->
        <!-- </article> -->
        
        <!-- Published -->
        <article published="Yes" title="TigerBeetle and NASA reliability" author="auth:mtolman" time="2024-10-31T00:00:00" id="article:2024-10-tigerbeetle-and-nasa-reliability" file="2024-10-tigerbeetle-and-nasa-reliability.md">
            <description>
Last time I posted I talked about Erlang and how it has built-in error recovery to maintain reliable systems. Since that post I've been digging into Zig after learning about how TigerBeetle and NASA maintain reliable systems. Their approach is the polar opposite of Erlang's approach, yet the results were impressive. The reason for the different approaches stems from different definitions and needs of "reliability."
            </description>
        </article>
        <article published="Yes" title="Venture into Erlang" author="auth:mtolman" time="2024-06-28T20:00:00" id="article:2024-06-28-foray-into-erlang" file="2024-06-28-foray-into-erlang.md">
            <description>
                Recently I've been exploring Erlang and the OTP. As I've been trying things out, some aspects of the design Erlang and the OTP have finally started to click. I'm writing this blog post about my experiences with Erlang and the OTP so far.
            </description>
        </article>
        <article published="Yes" title="A return to Clojure" author="auth:mtolman" time="2024-06-15T20:00:00" id="article:2024-04-a-return-to-clojure" file="2024-04-a-return-to-clojure.md">
            <description>
                Recently I started using Clojure again. It's been a while since I've used it. I'm recording my thoughts and impressions as I get back to using it. The experience doesn't feel like it changed much over the past few years, which is both good and bad. This is more of a post of my thoughts rather than having a clear direction.
            </description>
        </article>
        <article published="Yes" title="A journey across editors" author="auth:mtolman" time="2024-02-17T20:35:00" id="article:journey-across-ides-02-2024" file="journey-across-ides-02-2024.md">
            <description>
                Often I hear developer journeys through the programming languages they used or the companies they worked for. Sometimes it's told through frameworks learned or projects released or mistakes made. I'll probably tell my story a few times using some of those common methods. But today I thought I'd do something different.
            </description>
        </article>
        <article published="Yes" title="A site for my experiments" author="auth:mtolman" time="2024-02-01T17:10:00" id="article:a-site-for-my-experiments" file="a-site-for-my-experiments.md">
            <description>
                I recently created a website which holds a lot of my experiments. Some of these experiments either make it into my blog or they form the basis of some of my blog posts. Many of them don't make it into my blog posts. Instead of just letting them sit in the dark, I decided to put some of them on my experiments site.
            </description>
        </article>
        <article published="Yes" title="C++ to JavaScript with Cheerp" author="auth:mtolman" time="2024-01-07T22:50:00" id="article:cpp-to-javascript-with-cheerp" file="cpp-to-javascript-with-cheerp.md">
            <description>
                Emscripten is great, but it only compiles to WASM. With WASM, we often need to ship our own memory management, libraries, and communication layer to interact with the DOM. That can lead to a lot of code being created. However, Cheerp is able to compile C++ directly to JavaScript which greatly lowers the amount of outputted code. So I decided to give Cheerp a try and see how well it works translating C++ to JavaScript.
            </description>
        </article>
        <article published="Yes" title="Creating a WASM library with Embind" author="auth:mtolman" time="2023-12-13T09:30:00" id="article:creating-a-wasm-library-with-embind" file="creating-a-wasm-library-with-embind.md">
            <description>
                I've been working on my Test Jam project for a while. I had previously tried to do a WASM wrapper around my C/C++ build, but I ran into a memory leak which existed outside the C/C++ code. Instead of reading the manual, I rewrote the code in TypeScript. After the rewrite, I read the manual and learned what was the source of the leak. I then rebuilt my WASM wrapper and ended up with a TypeScript and WASM implementation. I then decided to start comparing the two implementations to see what the benefits and drawbacks are. I also wanted to test some well touted claims about WASM (e.g. performance, code reuse) in the context of a library.
            </description>
        </article>
        <article published="Yes" title="Overview of globally unique identifiers" author="auth:mtolman" time="2023-12-02T16:12:00-0700" id="article:overview-of-globally-unique-identifiers" file="overview-of-globally-unique-identifiers.md">
            <description>
                Recently I saw that CUID, a way to generate unique IDs, had been deprecated due to security concerns.

                That got me really curious. I haven't ever thought of IDs as being "secure." Instead, I've always treated them as untrusted, public-knowledge values. I've always built access controls around my IDs, even when they were randomly generated GUIDs. So I started looking at a lot of ID generators to see if this concept of "secure ids" really did exist, what meant, and what other properties IDs had. 
            </description>
        </article>
        <article published="Yes" title="Unsigned Integers in JavaScript" author="auth:mtolman" time="2023-11-30T16:00:00-0700" id="article:unsigned-integers-in-javascript" file="unsigned-integers-in-javascript.md">
            <description>
                Lately I've been experimenting with creating random data generators in TypeScript. I wanted to avoid using the global random number generator `Math.random` since I wanted my generators to be fully determinitic (i.e. if you give them the same input, they will always return the same output). I also wanted a seed to be passed in every time, which meant that I'd be creating a new generator every time.

                I started looking at alternatives and found TinyMT, which is a memory-friendly version of Mersenne Twister written in C. I decided to port it over to TypeScript, and I ran into a lot of issues due to the differences between C and JavaScript/TypeScript when it comes to numbers. Specifically, I had a lot of issues with unsigned integer arithmetic. After I got it all working, I decided to write this blog post about my journey with unsigned integer arithmetic in TypeScript/JavaScript.
            </description>
        </article>
        <article published="Yes" title="Writing a property test library" author="auth:mtolman" time="2023-11-28T16:08:00-0700" id="article:writing-a-property-test-library" file="writing-property-test-library.md">
            <description>
                My journey creating a property testing library, including the mistakes and learnings I had along the way. I go over my requirements for a framework, and my attempts at designing the core generation and simplification aspects. It also covers my progress as I switched between programming languages to get different perspectives.
            </description>
        </article>
        <article published="Yes" title="What is property testing?" id="article:what-is-property-testing" author="auth:mtolman" time="2023-10-23T00:00:00-0700" file="what-is-property-testing.md">
            <description>
                Property testing is a developmental approach to writing tests (both unit tests and integration tests) which
                helps developers find the limitations of their software. It isn't an all-encompassing set of principles
                or practices which impact the development lifecycle, unlike Test Driven Development.

                Instead, property tests focus on giving developers more tools for the actual test implementation, regardless
                of the testing practices which exist. Additionally, these tools aim to provide far better coverage and depth
                to testing than simple "line coverage" and "branch coverage" metrics can provide.
            </description>
        </article>
        <article published="Yes" title="Error Handling Across Programming Languages" id="article:error-handling-across-programming-languages" author="auth:mtolman" time="2023-09-10T00:00:00-0700" file="error-handling-across-programming-languages.md">
            <description>
                An overview of many different error handling paradigms in programming. Covers some of the advantages
                and pitfalls of each method. More of an overview rather than a comparison or opinion post.
            </description>
        </article>
        <article published="Yes" title="Stateless Logic" id="article:separation-of-logic-from-data-storage" author="auth:mtolman" time="2023-09-09T00:00:00-0700" file="stateless-logic.md">
            <description>
                Coupling any form of shared state with business logic causes lots of issues, both for the maintainability
                of the code and sometimes the performance of the code as well. In this article, we dive deep into what
                problems state can cause, how to remove state from methods, and the benefits that can come from state.
            </description>
        </article>
        <article published="Yes" title="Separating SQL from code with files: Initial thoughts" id="article:separate-sql-from-code-with-files-initial-thoughts" author="auth:mtolman" time="2022-11-28T00:00:00-0700" file="separate-sql-from-code-with-files-initial-thoughts.md">
            <description>
                Some initial thoughts after experimenting with separating SQL from code using SQL files.
                Comparing it against inline SQL as well as views and stored procedures.
            </description>
        </article>
        <article published="Yes" title="Predictions in Tech: Looking Forward from 2022" id="article:predictions-tech-2022" author="auth:mtolman" time="2022-11-11T00:00:00-0700" file="predictions-in-2022-2022-11-10.md">
            <description>
                Some predictions of mine looking forward, focused mostly on the tech industry.
                Made in 2022.
            </description>
        </article>
        <article published="Yes" title="Why Care About Web Accessibility" id="article:web-accessibility-basics-2022" author="auth:mtolman" time="2022-10-20T00:00:00-0700" file="web-accessibility-basics-2022.md">
            <description>
                Anyone with an internet connection can access the internet.
                But not everyone with access to the internet can use the internet.
                Millions of people are excluded from using large parts of the internet,
                and at no fault of their own.
                Instead, it's the fault of websites and the people who build them.
            </description>
        </article>
        <article published="Yes" title="Introduction to Localization and Language" id="article:introduction-to-localization-and-language" author="auth:mtolman" time="2022-09-27T00:00:00-0700" file="introduction-to-localization-and-language.md">
            <description>
                Localization is important to reach a global, international, and interlingual audience.
                To do that, one of the first major hurdles is to design localization code and best
                practices to be able to handle the diversities of human languages.

                In this article, we cover the common unknowns of human langauges and how to adapt
                code to handle them. We also talk about why avoiding certain sentence structures
                and phrases can help.
            </description>
        </article>
        <article published="Yes" title="Chains, Buckets, and Iteration" id="article:chains-buckets-and-iteration" author="auth:mtolman" time="2022-09-20T00:00:00-0700" file="chains-buckets-and-iteration-2022-09-20.md">
            <description>
                Why does it matter what types of iterators we have?
                Because it dictates how code can be written and how well code performs.

                Our iterators constrain what kinds of abstractions we can put around our data structures.
                Without nuance in our iterators, we can run into a "slowest common performance"
                problem when we try to make generalized libraries and solutions.
            </description>
        </article>
    </articles>
    <authors>
        <author id="auth:mtolman" name="Matt Tolman" profile-img="imgs/profile/mtolman-profile.jpg" link="https://www.linkedin.com/in/matthew-tolman">
            <bio>Senior Software Engineer at Intuit</bio>
        </author>
    </authors>
    <assets>
        <stylesheet type="scss" src="stylesheets/main.scss"/>
        <script type="js" src="script/mathjax-fallback.js"/>
        <copy src="favicon.ico"/>
        <copy src="favicon-16x16.png"/>
        <copy src="favicon-32x32.png"/>
        <copy src="apple-touch-icon.png"/>
        <copy src="android-chrome-512x512.png"/>
        <copy src="android-chrome-192x192.png"/>
        <copy src="site.webmanifest"/>
        <copy src="robots.txt"/>
    </assets>
    <portfolio>

    </portfolio>
</blog>
